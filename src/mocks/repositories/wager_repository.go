// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/nvnamsss/prpcl/adapters/database"
	dtos "github.com/nvnamsss/prpcl/dtos"

	mock "github.com/stretchr/testify/mock"

	models "github.com/nvnamsss/prpcl/models"
)

// WagerRepository is an autogenerated mock type for the WagerRepository type
type WagerRepository struct {
	mock.Mock
}

// Buy provides a mock function with given fields: ctx, wager, price, txn
func (_m *WagerRepository) Buy(ctx context.Context, wager *models.Wager, price float64, txn ...database.DBAdapter) error {
	_va := make([]interface{}, len(txn))
	for _i := range txn {
		_va[_i] = txn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, wager, price)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Wager, float64, ...database.DBAdapter) error); ok {
		r0 = rf(ctx, wager, price, txn...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, wager
func (_m *WagerRepository) Create(ctx context.Context, wager *models.Wager) error {
	ret := _m.Called(ctx, wager)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Wager) error); ok {
		r0 = rf(ctx, wager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *WagerRepository) Get(ctx context.Context, id int64) (*models.Wager, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Wager
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Wager); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *WagerRepository) List(ctx context.Context, req *dtos.ListWagersRequest) ([]*models.Wager, error) {
	ret := _m.Called(ctx, req)

	var r0 []*models.Wager
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.ListWagersRequest) []*models.Wager); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Wager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dtos.ListWagersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

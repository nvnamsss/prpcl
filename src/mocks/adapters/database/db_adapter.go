// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	database "github.com/nvnamsss/prpcl/adapters/database"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DBAdapter is an autogenerated mock type for the DBAdapter type
type DBAdapter struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *DBAdapter) Begin() database.DBAdapter {
	ret := _m.Called()

	var r0 database.DBAdapter
	if rf, ok := ret.Get(0).(func() database.DBAdapter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.DBAdapter)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *DBAdapter) Close() {
	_m.Called()
}

// Commit provides a mock function with given fields:
func (_m *DBAdapter) Commit() {
	_m.Called()
}

// DB provides a mock function with given fields:
func (_m *DBAdapter) DB() (*sql.DB, error) {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gormer provides a mock function with given fields:
func (_m *DBAdapter) Gormer() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Open provides a mock function with given fields: connectionString, config
func (_m *DBAdapter) Open(connectionString string, config gorm.Config) error {
	ret := _m.Called(connectionString, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gorm.Config) error); ok {
		r0 = rf(connectionString, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackUselessCommitted provides a mock function with given fields:
func (_m *DBAdapter) RollbackUselessCommitted() {
	_m.Called()
}
